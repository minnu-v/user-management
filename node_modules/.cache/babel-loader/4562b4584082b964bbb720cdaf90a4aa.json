{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/radical/React/user-management/src/components/leaveManagement/Request.js\";\n\n/* eslint-disable no-undef */\nimport React, { Component } from 'react';\nconst MAX_SIZE = 2097152; // 1024 * 1024 * 2\n\nconst imageTypes = ['.jpg', '.JPG', '.jpeg', '.JPEG', '.pjpg', '.png', '.PJPG', '.PNG', '.gif', '.GIF'];\nexport default class FileUpload extends Component {\n  constructor(...args) {\n    super(...args);\n    this.form = null;\n    this.state = {\n      error: '',\n      loading: false\n    };\n\n    this.onChange = e => {\n      const file = e.target.files[0];\n\n      if (!this.validateImage(file)) {\n        this.form.reset();\n        return;\n      }\n\n      this.setState({\n        error: ''\n      });\n      this.uploadFile(file);\n    };\n\n    this.uploadFile = async file => {\n      const formData = new FormData();\n      formData.append('file', file);\n      this.setState({\n        loading: true\n      });\n      const data = await fileUpload(formData);\n      this.setState({\n        loading: false\n      }, () => {\n        this.form.reset();\n\n        if (data.statusCode === 200) {\n          this.props.onUpload(data.response.fileId);\n        } else {\n          this.setState({\n            error: API_ERROR_MESSAGE\n          });\n        }\n      });\n    };\n\n    this.validateImage = file => {\n      const imageExtension = file.name.substring(file.name.lastIndexOf('.'));\n      const imageSize = file.size;\n\n      if (imageTypes.indexOf(imageExtension) < 0) {\n        this.setState({\n          error: 'Please Select only Image Files. Supported formats : .jpg, .png'\n        });\n        return false;\n      } else if (imageSize > MAX_SIZE) {\n        this.setState({\n          error: 'Maximum file size allowed is 2MB'\n        });\n        return false;\n      }\n\n      return true;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      ref: ref => {\n        this.form = ref;\n      },\n      children: [/*#__PURE__*/_jsxDEV(Loader, {\n        show: this.state.loading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: this.onChange,\n          accept: \"image/png, image/jpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"text-danger\",\n          children: this.state.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/radical/React/user-management/src/components/leaveManagement/Request.js"],"names":["React","Component","MAX_SIZE","imageTypes","FileUpload","form","state","error","loading","onChange","e","file","target","files","validateImage","reset","setState","uploadFile","formData","FormData","append","data","fileUpload","statusCode","props","onUpload","response","fileId","API_ERROR_MESSAGE","imageExtension","name","substring","lastIndexOf","imageSize","size","indexOf","render","ref"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport React, { Component } from 'react';\n\nconst MAX_SIZE = 2097152; // 1024 * 1024 * 2\nconst imageTypes = ['.jpg', '.JPG', '.jpeg', '.JPEG', '.pjpg', '.png', '.PJPG', '.PNG', '.gif', '.GIF'];\n\nexport default class FileUpload extends Component {\n    form = null;\n\n    state = {\n        error: '',\n        loading: false,\n    };\n\n    onChange = e => {\n        const file = e.target.files[0];\n        if (!this.validateImage(file)) {\n            this.form.reset();\n            return;\n        }\n\n        this.setState({ error: '' });\n        this.uploadFile(file);\n    }\n\n    uploadFile = async file => {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        this.setState({ loading: true });\n\n        const data = await fileUpload(formData);\n\n        this.setState({ loading: false }, () => {\n            this.form.reset();\n            if (data.statusCode === 200) {\n                this.props.onUpload(data.response.fileId);\n            } else {\n                this.setState({ error: API_ERROR_MESSAGE });\n            }\n        });\n    }\n\n    validateImage = file => {\n        const imageExtension = file.name.substring(file.name.lastIndexOf('.'));\n        const imageSize = file.size;\n        if (imageTypes.indexOf(imageExtension) < 0) {\n            this.setState({\n                error: 'Please Select only Image Files. Supported formats : .jpg, .png',\n            });\n            return false;\n        } else if (imageSize > MAX_SIZE) {\n            this.setState({\n                error: 'Maximum file size allowed is 2MB',\n            });\n            return false;\n        }\n\n        return true;\n    }\n\n    render() {\n        return (\n            <form ref={ref => { this.form = ref; }}>\n                <Loader show={this.state.loading} />\n                <div className=\"form-group\">\n                    <input type=\"file\" onChange={this.onChange} accept=\"image/png, image/jpeg\"/>\n                    <small className=\"text-danger\">{this.state.error}</small>\n                </div>\n            </form>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}